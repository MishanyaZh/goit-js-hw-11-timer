{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","intervalId","targetDate","selector","start","setInterval","currentTime","Date","now","deltaTime","updateTimer","stop","clearInterval","time","days","Math","floor","hours","pad","mins","secs","timerRef","document","querySelector","daysRef","hoursRef","minsRef","secsRef","textContent","value","String","padStart","newCountdownTimer"],"mappings":";;;AACA,MAAMA,EACFC,aAAY,WAAEC,EAAF,WAAcC,EAAd,SAA0BC,EAAW,OACxCF,KAAAA,WAAaA,EAClB,KAAKC,WAAaA,EAClB,KAAKC,SAAWA,EAGpBC,QACSH,KAAAA,WAAaI,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKP,WAAaI,EAE/BI,KAAAA,YAAYD,GAEbA,GAAa,GACRE,KAAAA,QAIX,KAGNA,OACIC,cAAc,KAAKX,YACdA,KAAAA,WAAa,KACbS,KAAAA,YAAY,GAGrBA,YAAYG,GACFC,MAAAA,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQ,KAAKC,IACfH,KAAKC,MAAOH,EAAQ,MAAyB,OAE3CM,EAAO,KAAKD,IAAIH,KAAKC,MAAOH,EAAQ,KAAoB,MACxDO,EAAO,KAAKF,IAAIH,KAAKC,MAAOH,EAAQ,IAAc,MAElDQ,EAAWC,SAASC,cAAc,KAAKpB,UAEvCqB,EAAUH,EAASE,cAAc,uBACjCE,EAAWJ,EAASE,cAAc,wBAClCG,EAAUL,EAASE,cAAc,uBACjCI,EAAUN,EAASE,cAAc,uBAEvCC,EAAQI,eAAiBd,IACzBW,EAASG,eAAiBX,IAC1BS,EAAQE,eAAiBT,IACzBQ,EAAQC,eAAiBR,IAG7BF,IAAIW,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAKzC,MAAOC,EAAoB,IAAIjC,EAAe,CAC1CI,SAAU,WACVD,WAAY,IAAIK,KAAK,kBAGzByB,EAAkB5B;;AC5DlB,aADA,QAAA,oBACA,QAAA","file":"src.0e697b9a.js","sourceRoot":"../src","sourcesContent":["\nclass CountdownTimer {\n    constructor({ intervalId, targetDate, selector = null }) {\n        this.intervalId = intervalId,\n        this.targetDate = targetDate,\n        this.selector = selector\n    }\n\n    start() {\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n\n            this.updateTimer(deltaTime);\n            \n            if (deltaTime <= 0) {\n                this.stop();\n                return;\n            }\n            \n        },1000);\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        this.updateTimer(0);\n    }\n\n    updateTimer(time) {\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\n        const hours = this.pad(\n            Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        );\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        const timerRef = document.querySelector(this.selector);\n        // const timerRef = document.querySelector('#timer-1');\n        const daysRef = timerRef.querySelector('[data-value=\"days\"]');\n        const hoursRef = timerRef.querySelector('[data-value=\"hours\"]');\n        const minsRef = timerRef.querySelector('[data-value=\"mins\"]');\n        const secsRef = timerRef.querySelector('[data-value=\"secs\"]');\n\n        daysRef.textContent = `${days}`;\n        hoursRef.textContent = `${hours}`;\n        minsRef.textContent = `${mins}`;\n        secsRef.textContent = `${secs}`;\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n\n}\n\nconst  newCountdownTimer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 13, 2021'),\n});\n\nnewCountdownTimer.start();","import './sass/main.scss';\nimport './js/timer';"]}